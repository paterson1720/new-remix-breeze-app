import parseYamlHeader from "gray-matter";
import fs from "fs/promises";

/**
 * When ever a new documentation page is added in public/documentation,
 * this script should be run to generate the menu. It can be run using
 * npm run docs:generate
 */
async function generateDocsMenu() {
  const folders = await fs.readdir(`public/documentation`);
  let allVersions = [];

  for (const folder of folders) {
    if (folder === "__autogenerated__" || folder.startsWith(".")) continue;
    const versions = await fs.readdir(`public/documentation/${folder}`);
    allVersions = Array.from(new Set([...allVersions, ...versions]));

    for (const version of versions) {
      const docsMenu = [];

      const filesOrFolders = await fs.readdir(`public/documentation/${folder}/${version}`);

      for (const item of filesOrFolders) {
        if (["index.md", "__autogenerated__"].includes(item)) continue;

        const menu = {};
        menu.children = [];
        menu.attrs = { title: titlizeFolderName(item) };

        const subFiles = await fs.readdir(`public/documentation/${folder}/${version}/${item}`);
        const metaFile = subFiles.find((f) => f === "_meta.md");
        const contentFiles = subFiles.filter((f) => f !== "_meta.md");

        if (metaFile) {
          const filePath = `public/documentation/${folder}/${version}/${item}/${metaFile}`;
          const md = await fs.readFile(filePath, "utf-8");
          const { attrs } = parseAttrs(md, metaFile);
          menu.attrs = attrs;
        }

        for (const subFile of contentFiles) {
          const filePath = `public/documentation/${folder}/${version}/${item}/${subFile}`;
          const md = await fs.readFile(filePath, "utf-8");
          const { attrs } = parseAttrs(md, subFile);

          const slug = `${item}/${makeSlug(subFile)}`;
          if (slug === "") continue;

          menu.children.push({
            attrs,
            filename: subFile,
            slug,
            hasContent: md.length > 0,
            children: [],
          });
        }

        docsMenu.push(menu);
      }
      await fs.mkdir(`public/documentation/__autogenerated__/${version}`, { recursive: true });
      await fs.writeFile(
        `public/documentation/__autogenerated__/${version}/${folder}.json`,
        JSON.stringify(docsMenu, null, 2)
      );
    }
  }

  await fs.writeFile(
    `public/documentation/__autogenerated__/versions.json`,
    JSON.stringify(allVersions, null, 2)
  );
}

function parseAttrs(md, filename) {
  let { data, content } = parseYamlHeader(md);
  return {
    content,
    attrs: {
      title: filename,
      ...data,
    },
  };
}

function makeSlug(docName) {
  return docName
    .replace(/^(.+\/)?docs\//, "")
    .replace(/\.md$/, "")
    .replace(/index$/, "")
    .replace(/\/$/, "");
}

/**
 * Convert a folder name to a title
 * @param {string} fileName
 * @returns {string}
 * @example
 * fileNameToTitle("my-folder-name") => My Folder Name
 */
function titlizeFolderName(fileName) {
  return fileName.replace(/-/g, " ").replace(/(\b[a-z](?!\s))/g, (x) => x.toUpperCase());
}

generateDocsMenu();
